"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const expect_type_1 = require("expect-type");
const props_1 = require("../props");
describe('buildProp', () => {
    it('Only type', () => {
        (0, expect_type_1.expectTypeOf)((0, props_1.buildProp)({
            type: (0, props_1.definePropType)(String),
        })).toEqualTypeOf();
    });
    it('Only values', () => {
        (0, expect_type_1.expectTypeOf)((0, props_1.buildProp)({
            values: [1, 2, 3, 4],
        })).toEqualTypeOf();
    });
    it('Type and values', () => {
        (0, expect_type_1.expectTypeOf)((0, props_1.buildProp)({
            type: (0, props_1.definePropType)(Array),
            values: [1, 2, 3, 4],
        })).toEqualTypeOf();
    });
    it('Values and validator', () => {
        (0, expect_type_1.expectTypeOf)((0, props_1.buildProp)({
            values: ['a', 'b', 'c'],
            validator: (val) => typeof val === 'number',
        })).toEqualTypeOf();
    });
    it('Values and required', () => {
        (0, expect_type_1.expectTypeOf)((0, props_1.buildProp)({
            values: ['a', 'b', 'c'],
            required: true,
        })).toEqualTypeOf();
    });
    it('Value and default', () => {
        (0, expect_type_1.expectTypeOf)((0, props_1.buildProp)({
            values: ['a', 'b', 'c'],
            required: false,
            default: 'b',
        })).toEqualTypeOf();
    });
    it('Type and Array default value', () => {
        (0, expect_type_1.expectTypeOf)((0, props_1.buildProp)({
            type: (0, props_1.definePropType)(Array),
            default: () => (0, props_1.mutable)(['a', 'b']),
        })).toEqualTypeOf();
    });
    it('Type and Object default value', () => {
        (0, expect_type_1.expectTypeOf)((0, props_1.buildProp)({
            type: (0, props_1.definePropType)(Object),
            default: () => (0, props_1.mutable)({ key: 'value' }),
        })).toEqualTypeOf();
    });
    it('Type, validator and Object default value', () => {
        (0, expect_type_1.expectTypeOf)((0, props_1.buildProp)({
            type: (0, props_1.definePropType)(Object),
            default: () => ({ key: 'value' }),
            validator: (val) => true,
        })).toEqualTypeOf();
    });
    it('Type, validator, required', () => {
        (0, expect_type_1.expectTypeOf)((0, props_1.buildProp)({
            type: (0, props_1.definePropType)(String),
            required: true,
            validator: (val) => true,
        })).toEqualTypeOf();
    });
    it('Normal type', () => {
        (0, expect_type_1.expectTypeOf)((0, props_1.buildProp)({
            type: String,
        })).toEqualTypeOf();
    });
    it('Normal types', () => {
        (0, expect_type_1.expectTypeOf)((0, props_1.buildProp)({ type: [String, Number, Boolean] })).toEqualTypeOf();
    });
    it('Normal type and values', () => {
        (0, expect_type_1.expectTypeOf)((0, props_1.buildProp)({
            type: String,
            values: ['1', '2', '3'],
        })).toEqualTypeOf();
    });
    it('Required and validator', () => {
        (0, expect_type_1.expectTypeOf)((0, props_1.buildProp)({
            required: true,
            validator: (val) => true,
        })).toEqualTypeOf();
    });
    it('Required and validator', () => {
        (0, expect_type_1.expectTypeOf)((0, props_1.buildProp)({
            values: (0, props_1.keyOf)({ a: 'a', b: 'b' }),
            default: 'a',
        })).toEqualTypeOf();
    });
    it('Type and default value', () => {
        (0, expect_type_1.expectTypeOf)((0, props_1.buildProp)({
            type: (0, props_1.definePropType)(Object),
            default: () => (0, props_1.mutable)({ key: 'a' }),
        })).toEqualTypeOf();
    });
    it('Type and default value', () => {
        (0, expect_type_1.expectTypeOf)((0, props_1.buildProp)({
            type: [String, Number],
            default: '',
        })).toEqualTypeOf();
    });
    it('extract', () => {
        const props = {
            key1: (0, props_1.buildProp)({
                type: String,
                required: true,
            }),
            key2: (0, props_1.buildProp)({
                type: [String, Number],
                required: true,
            }),
        };
        (0, expect_type_1.expectTypeOf)().toEqualTypeOf();
    });
});
describe('buildProps', () => {
    it('test buildProps', () => {
        (0, expect_type_1.expectTypeOf)((0, props_1.buildProps)({
            key1: {
                type: (0, props_1.definePropType)(String),
            },
            key2: {
                values: [1, 2, 3, 4],
            },
        })).toEqualTypeOf();
    });
});
