"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aria_1 = require("../aria");
const CE = (tag) => document.createElement(tag);
describe('Aria Utils', () => {
    describe('Trigger Event', () => {
        it('Util trigger event to trigger event correctly', () => {
            const div = document.createElement('div');
            jest.spyOn(div, 'dispatchEvent');
            const eventName = 'click';
            (0, aria_1.triggerEvent)(div, eventName);
            expect(div.dispatchEvent).toHaveBeenCalled();
        });
    });
    describe('isFocusable', () => {
        it("should be focusable when element has tabindex attr, and it's value is greater than 0", () => {
            const $el = CE('div');
            $el.tabIndex = 1;
            expect((0, aria_1.isFocusable)($el)).toBe(true);
        });
        it("should not be focusable when element has tabindex attr, and it's value is smaller than 0", () => {
            const $el = CE('div');
            $el.tabIndex = -1;
            expect((0, aria_1.isFocusable)($el)).toBe(false);
        });
        it('should not be focusable when disbaled', () => {
            const $el = CE('div');
            $el.setAttribute('disabled', 'true');
            expect((0, aria_1.isFocusable)($el)).toBe(false);
        });
        it('should be focusable when target is anchor and rel is not set to ignore', () => {
            const $el = CE('a');
            $el.href = '#anchor';
            $el.rel = 'noreferrer';
            expect((0, aria_1.isFocusable)($el)).toBe(true);
        });
        it('should not be focusable when target is anchor and rel is set to ignore', () => {
            const $el = CE('a');
            $el.href = '#anchor';
            $el.rel = 'ignore';
            expect((0, aria_1.isFocusable)($el)).toBe(false);
        });
        it('should be focusable when target is input and type is not hidden or is not file', () => {
            const $el = CE('input');
            $el.type = 'hidden';
            expect((0, aria_1.isFocusable)($el)).toBe(false);
            $el.type = 'file';
            expect((0, aria_1.isFocusable)($el)).toBe(false);
            $el.type = 'number';
            expect((0, aria_1.isFocusable)($el)).toBe(true);
        });
        it('should be focusable when the target is button/select/textarea', () => {
            let $el = CE('button');
            expect((0, aria_1.isFocusable)($el)).toBe(true);
            $el = CE('select');
            expect((0, aria_1.isFocusable)($el)).toBe(true);
            $el = CE('textarea');
            expect((0, aria_1.isFocusable)($el)).toBe(true);
        });
    });
});
