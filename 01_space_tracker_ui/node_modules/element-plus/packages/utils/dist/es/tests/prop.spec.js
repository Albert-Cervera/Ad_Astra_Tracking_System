import { expectTypeOf } from 'expect-type';
import { buildProp, definePropType, mutable, keyOf, buildProps } from '../props';
describe('buildProp', () => {
    it('Only type', () => {
        expectTypeOf(buildProp({
            type: definePropType(String),
        })).toEqualTypeOf();
    });
    it('Only values', () => {
        expectTypeOf(buildProp({
            values: [1, 2, 3, 4],
        })).toEqualTypeOf();
    });
    it('Type and values', () => {
        expectTypeOf(buildProp({
            type: definePropType(Array),
            values: [1, 2, 3, 4],
        })).toEqualTypeOf();
    });
    it('Values and validator', () => {
        expectTypeOf(buildProp({
            values: ['a', 'b', 'c'],
            validator: (val) => typeof val === 'number',
        })).toEqualTypeOf();
    });
    it('Values and required', () => {
        expectTypeOf(buildProp({
            values: ['a', 'b', 'c'],
            required: true,
        })).toEqualTypeOf();
    });
    it('Value and default', () => {
        expectTypeOf(buildProp({
            values: ['a', 'b', 'c'],
            required: false,
            default: 'b',
        })).toEqualTypeOf();
    });
    it('Type and Array default value', () => {
        expectTypeOf(buildProp({
            type: definePropType(Array),
            default: () => mutable(['a', 'b']),
        })).toEqualTypeOf();
    });
    it('Type and Object default value', () => {
        expectTypeOf(buildProp({
            type: definePropType(Object),
            default: () => mutable({ key: 'value' }),
        })).toEqualTypeOf();
    });
    it('Type, validator and Object default value', () => {
        expectTypeOf(buildProp({
            type: definePropType(Object),
            default: () => ({ key: 'value' }),
            validator: (val) => true,
        })).toEqualTypeOf();
    });
    it('Type, validator, required', () => {
        expectTypeOf(buildProp({
            type: definePropType(String),
            required: true,
            validator: (val) => true,
        })).toEqualTypeOf();
    });
    it('Normal type', () => {
        expectTypeOf(buildProp({
            type: String,
        })).toEqualTypeOf();
    });
    it('Normal types', () => {
        expectTypeOf(buildProp({ type: [String, Number, Boolean] })).toEqualTypeOf();
    });
    it('Normal type and values', () => {
        expectTypeOf(buildProp({
            type: String,
            values: ['1', '2', '3'],
        })).toEqualTypeOf();
    });
    it('Required and validator', () => {
        expectTypeOf(buildProp({
            required: true,
            validator: (val) => true,
        })).toEqualTypeOf();
    });
    it('Required and validator', () => {
        expectTypeOf(buildProp({
            values: keyOf({ a: 'a', b: 'b' }),
            default: 'a',
        })).toEqualTypeOf();
    });
    it('Type and default value', () => {
        expectTypeOf(buildProp({
            type: definePropType(Object),
            default: () => mutable({ key: 'a' }),
        })).toEqualTypeOf();
    });
    it('Type and default value', () => {
        expectTypeOf(buildProp({
            type: [String, Number],
            default: '',
        })).toEqualTypeOf();
    });
    it('extract', () => {
        const props = {
            key1: buildProp({
                type: String,
                required: true,
            }),
            key2: buildProp({
                type: [String, Number],
                required: true,
            }),
        };
        expectTypeOf().toEqualTypeOf();
    });
});
describe('buildProps', () => {
    it('test buildProps', () => {
        expectTypeOf(buildProps({
            key1: {
                type: definePropType(String),
            },
            key2: {
                values: [1, 2, 3, 4],
            },
        })).toEqualTypeOf();
    });
});
