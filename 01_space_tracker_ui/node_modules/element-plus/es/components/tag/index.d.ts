export declare const ElTag: import("../../utils/types").SFCWithInstall<import("vue").DefineComponent<{
    readonly closable: BooleanConstructor;
    readonly type: {
        readonly type: import("vue").PropType<"" | "success" | "warning" | "info" | "danger">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "";
    };
    readonly hit: BooleanConstructor;
    readonly disableTransitions: BooleanConstructor;
    readonly color: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly size: {
        readonly type: import("vue").PropType<"small" | "medium" | "mini">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: undefined;
    };
    readonly effect: {
        readonly type: import("vue").PropType<"light" | "dark" | "plain">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "light";
    };
}, {
    classes: import("vue").ComputedRef<string[]>;
    handleClose: (event: MouseEvent) => void;
    handleClick: (event: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    close: (evt: MouseEvent) => boolean;
    click: (evt: MouseEvent) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly closable?: unknown;
    readonly type?: unknown;
    readonly hit?: unknown;
    readonly disableTransitions?: unknown;
    readonly color?: unknown;
    readonly size?: unknown;
    readonly effect?: unknown;
} & {
    type: "" | "success" | "warning" | "info" | "danger";
    closable: boolean;
    effect: "light" | "dark" | "plain";
    color: string;
    hit: boolean;
    disableTransitions: boolean;
} & {
    size?: "small" | "medium" | "mini";
}> & {
    onClose?: (evt: MouseEvent) => any;
    onClick?: (evt: MouseEvent) => any;
}, {
    type: "" | "success" | "warning" | "info" | "danger";
    closable: boolean;
    effect: "light" | "dark" | "plain";
    size: "small" | "medium" | "mini";
    color: string;
    hit: boolean;
    disableTransitions: boolean;
}>> & Record<string, any>;
export default ElTag;
export * from './src/tag';
