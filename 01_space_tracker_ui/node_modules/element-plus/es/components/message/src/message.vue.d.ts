import type { CSSProperties } from 'vue';
declare const _default: import("vue").DefineComponent<{
    readonly customClass: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly center: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly dangerouslyUseHTMLString: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly duration: {
        readonly type: NumberConstructor;
        readonly default: 3000;
    };
    readonly iconClass: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly id: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly message: {
        readonly type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "";
    };
    readonly onClose: {
        readonly type: import("vue").PropType<() => void>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: undefined;
    };
    readonly showClose: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly type: {
        readonly type: import("vue").PropType<"error" | "success" | "warning" | "info">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "info";
    };
    readonly offset: {
        readonly type: NumberConstructor;
        readonly default: 20;
    };
    readonly zIndex: {
        readonly type: NumberConstructor;
        readonly default: 0;
    };
}, {
    typeClass: import("vue").ComputedRef<string>;
    customStyle: import("vue").ComputedRef<CSSProperties>;
    visible: import("vue").Ref<boolean>;
    close: () => void;
    clearTimer: () => void;
    startTimer: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    destroy: () => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly customClass?: unknown;
    readonly center?: unknown;
    readonly dangerouslyUseHTMLString?: unknown;
    readonly duration?: unknown;
    readonly iconClass?: unknown;
    readonly id?: unknown;
    readonly message?: unknown;
    readonly onClose?: unknown;
    readonly showClose?: unknown;
    readonly type?: unknown;
    readonly offset?: unknown;
    readonly zIndex?: unknown;
} & {
    message: string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    type: "error" | "success" | "warning" | "info";
    zIndex: number;
    offset: number;
    center: boolean;
    iconClass: string;
    id: string;
    showClose: boolean;
    customClass: string;
    duration: number;
    dangerouslyUseHTMLString: boolean;
} & {
    onClose?: () => void;
}> & {
    onDestroy?: () => any;
}, {
    message: string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    type: "error" | "success" | "warning" | "info";
    zIndex: number;
    offset: number;
    center: boolean;
    onClose: () => void;
    iconClass: string;
    id: string;
    showClose: boolean;
    customClass: string;
    duration: number;
    dangerouslyUseHTMLString: boolean;
}>;
export default _default;
