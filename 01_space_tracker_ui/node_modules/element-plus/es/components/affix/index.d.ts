export declare const ElAffix: import("../../utils/types").SFCWithInstall<import("vue").DefineComponent<{
    readonly zIndex: {
        readonly type: import("vue").PropType<import("csstype").ZIndexProperty>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: 100;
    };
    readonly target: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly offset: {
        readonly type: NumberConstructor;
        readonly default: 0;
    };
    readonly position: {
        readonly type: import("vue").PropType<"bottom" | "top">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "top";
    };
}, {
    root: import("vue").Ref<HTMLDivElement>;
    state: {
        fixed: boolean;
        height: number;
        width: number;
        scrollTop: number;
        clientHeight: number;
        transform: number;
    };
    rootStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
    affixStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    scroll: ({ scrollTop, fixed }: {
        scrollTop: number;
        fixed: boolean;
    }) => boolean;
    change: (fixed: boolean) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly zIndex?: unknown;
    readonly target?: unknown;
    readonly offset?: unknown;
    readonly position?: unknown;
} & {
    zIndex: import("csstype").ZIndexProperty;
    target: string;
    offset: number;
    position: "bottom" | "top";
} & {}> & {
    onChange?: (fixed: boolean) => any;
    onScroll?: (args_0: {
        scrollTop: number;
        fixed: boolean;
    }) => any;
}, {
    zIndex: import("csstype").ZIndexProperty;
    target: string;
    offset: number;
    position: "bottom" | "top";
}>> & Record<string, any>;
export default ElAffix;
export * from './src/affix';
