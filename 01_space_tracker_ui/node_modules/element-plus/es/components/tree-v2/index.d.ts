export declare const ElTreeV2: import("../../utils/types").SFCWithInstall<import("vue").DefineComponent<{
    readonly data: {
        readonly type: import("vue").PropType<import("./src/types").TreeData>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: () => [];
    };
    readonly emptyText: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: undefined;
    };
    readonly height: {
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: number;
    };
    readonly props: {
        readonly type: import("vue").PropType<import("./src/types").TreeOptionProps>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: () => import("../../utils/types").Mutable<{
            readonly children: import("./src/virtual-tree").TreeOptionsEnum.CHILDREN;
            readonly label: import("./src/virtual-tree").TreeOptionsEnum.LABEL;
            readonly disabled: import("./src/virtual-tree").TreeOptionsEnum.DISABLED;
            readonly value: import("./src/virtual-tree").TreeOptionsEnum.KEY;
        }>;
    };
    readonly highlightCurrent: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly showCheckbox: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly defaultCheckedKeys: {
        readonly type: import("vue").PropType<import("./src/types").TreeKey[]>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: () => [];
    };
    readonly checkStrictly: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly defaultExpandedKeys: {
        readonly type: import("vue").PropType<import("./src/types").TreeKey[]>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: () => [];
    };
    readonly indent: {
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: number;
    };
    readonly icon: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: undefined;
    };
    readonly expandOnClickNode: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly checkOnClickNode: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly currentNodeKey: {
        readonly type: import("vue").PropType<import("./src/types").TreeKey>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: undefined;
    };
    readonly accordion: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly filterMethod: {
        readonly type: import("vue").PropType<import("./src/types").FilterMethod>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: undefined;
    };
    readonly perfMode: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
}, {
    t: (...args: any[]) => string;
    flattenTree: import("vue").ComputedRef<import("./src/types").TreeNode[]>;
    itemSize: number;
    isNotEmpty: import("vue").ComputedRef<boolean>;
    toggleExpand: (node: import("./src/types").TreeNode) => void;
    toggleCheckbox: (node: import("./src/types").TreeNode, isChecked: boolean, nodeClick?: boolean) => void;
    isExpanded: (node: import("./src/types").TreeNode) => boolean;
    isIndeterminate: (node: import("./src/types").TreeNode) => boolean;
    isChecked: (node: import("./src/types").TreeNode) => boolean;
    isDisabled: (node: import("./src/types").TreeNode) => boolean;
    isCurrent: (node: import("./src/types").TreeNode) => boolean;
    isForceHiddenExpandIcon: (node: import("./src/types").TreeNode) => boolean;
    handleNodeClick: (node: import("./src/types").TreeNode) => void;
    handleNodeCheck: (node: import("./src/types").TreeNode, checked: boolean) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "node-click": (data: import("../tree/src/tree.type").TreeNodeData, node: import("./src/types").TreeNode) => import("./src/types").TreeNode;
    "node-expand": (data: import("../tree/src/tree.type").TreeNodeData, node: import("./src/types").TreeNode) => import("./src/types").TreeNode;
    "node-collapse": (data: import("../tree/src/tree.type").TreeNodeData, node: import("./src/types").TreeNode) => import("./src/types").TreeNode;
    "current-change": (data: import("../tree/src/tree.type").TreeNodeData, node: import("./src/types").TreeNode) => import("./src/types").TreeNode;
    check: (data: import("../tree/src/tree.type").TreeNodeData, checkedInfo: import("./src/types").CheckedInfo) => import("./src/types").CheckedInfo;
    "check-change": (data: import("../tree/src/tree.type").TreeNodeData, checked: boolean) => boolean;
    "node-contextmenu": (event: Event, data: import("../tree/src/tree.type").TreeNodeData, node: import("./src/types").TreeNode) => import("./src/types").TreeNode;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly data?: unknown;
    readonly emptyText?: unknown;
    readonly height?: unknown;
    readonly props?: unknown;
    readonly highlightCurrent?: unknown;
    readonly showCheckbox?: unknown;
    readonly defaultCheckedKeys?: unknown;
    readonly checkStrictly?: unknown;
    readonly defaultExpandedKeys?: unknown;
    readonly indent?: unknown;
    readonly icon?: unknown;
    readonly expandOnClickNode?: unknown;
    readonly checkOnClickNode?: unknown;
    readonly currentNodeKey?: unknown;
    readonly accordion?: unknown;
    readonly filterMethod?: unknown;
    readonly perfMode?: unknown;
} & {
    height: number;
    props: import("../../utils/types").Mutable<{
        readonly children: import("./src/virtual-tree").TreeOptionsEnum.CHILDREN;
        readonly label: import("./src/virtual-tree").TreeOptionsEnum.LABEL;
        readonly disabled: import("./src/virtual-tree").TreeOptionsEnum.DISABLED;
        readonly value: import("./src/virtual-tree").TreeOptionsEnum.KEY;
    }>;
    data: import("./src/types").TreeData;
    checkStrictly: boolean;
    accordion: boolean;
    perfMode: boolean;
    indent: number;
    defaultCheckedKeys: import("./src/types").TreeKey[];
    defaultExpandedKeys: import("./src/types").TreeKey[];
    showCheckbox: boolean;
    expandOnClickNode: boolean;
    checkOnClickNode: boolean;
    highlightCurrent: boolean;
} & {
    emptyText?: string;
    icon?: string;
    filterMethod?: import("./src/types").FilterMethod;
    currentNodeKey?: import("./src/types").TreeKey;
}> & {
    "onCurrent-change"?: (data: import("../tree/src/tree.type").TreeNodeData, node: import("./src/types").TreeNode) => any;
    "onNode-expand"?: (data: import("../tree/src/tree.type").TreeNodeData, node: import("./src/types").TreeNode) => any;
    onCheck?: (data: import("../tree/src/tree.type").TreeNodeData, checkedInfo: import("./src/types").CheckedInfo) => any;
    "onCheck-change"?: (data: import("../tree/src/tree.type").TreeNodeData, checked: boolean) => any;
    "onNode-click"?: (data: import("../tree/src/tree.type").TreeNodeData, node: import("./src/types").TreeNode) => any;
    "onNode-contextmenu"?: (event: Event, data: import("../tree/src/tree.type").TreeNodeData, node: import("./src/types").TreeNode) => any;
    "onNode-collapse"?: (data: import("../tree/src/tree.type").TreeNodeData, node: import("./src/types").TreeNode) => any;
}, {
    height: number;
    props: import("../../utils/types").Mutable<{
        readonly children: import("./src/virtual-tree").TreeOptionsEnum.CHILDREN;
        readonly label: import("./src/virtual-tree").TreeOptionsEnum.LABEL;
        readonly disabled: import("./src/virtual-tree").TreeOptionsEnum.DISABLED;
        readonly value: import("./src/virtual-tree").TreeOptionsEnum.KEY;
    }>;
    data: import("./src/types").TreeData;
    emptyText: string;
    icon: string;
    checkStrictly: boolean;
    filterMethod: import("./src/types").FilterMethod;
    accordion: boolean;
    perfMode: boolean;
    indent: number;
    currentNodeKey: import("./src/types").TreeKey;
    defaultCheckedKeys: import("./src/types").TreeKey[];
    defaultExpandedKeys: import("./src/types").TreeKey[];
    showCheckbox: boolean;
    expandOnClickNode: boolean;
    checkOnClickNode: boolean;
    highlightCurrent: boolean;
}>> & Record<string, any>;
export default ElTreeV2;
