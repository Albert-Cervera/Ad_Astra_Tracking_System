declare const _default: import("vue").DefineComponent<{
    readonly node: {
        readonly type: import("vue").PropType<import("./types").TreeNode>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: () => import("../../../utils/types").Mutable<{
            readonly key: -1;
            readonly level: -1;
            readonly data: {};
        }>;
    };
    readonly expanded: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly checked: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly indeterminate: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly showCheckbox: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly disabled: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly current: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly hiddenExpandIcon: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
}, {
    indent: import("vue").ComputedRef<number>;
    icon: import("vue").ComputedRef<string>;
    handleClick: () => void;
    handleExpandIconClick: () => void;
    handleCheckChange: (value: boolean) => void;
    handleContextMenu: (event: Event) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    click: (node: import("./types").TreeNode) => boolean;
    toggle: (node: import("./types").TreeNode) => boolean;
    check: (node: import("./types").TreeNode, checked: boolean) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly node?: unknown;
    readonly expanded?: unknown;
    readonly checked?: unknown;
    readonly indeterminate?: unknown;
    readonly showCheckbox?: unknown;
    readonly disabled?: unknown;
    readonly current?: unknown;
    readonly hiddenExpandIcon?: unknown;
} & {
    disabled: boolean;
    expanded: boolean;
    current: boolean;
    indeterminate: boolean;
    checked: boolean;
    node: import("./types").TreeNode;
    showCheckbox: boolean;
    hiddenExpandIcon: boolean;
} & {}> & {
    onClick?: (node: import("./types").TreeNode) => any;
    onCheck?: (node: import("./types").TreeNode, checked: boolean) => any;
    onToggle?: (node: import("./types").TreeNode) => any;
}, {
    disabled: boolean;
    expanded: boolean;
    current: boolean;
    indeterminate: boolean;
    checked: boolean;
    node: import("./types").TreeNode;
    showCheckbox: boolean;
    hiddenExpandIcon: boolean;
}>;
export default _default;
