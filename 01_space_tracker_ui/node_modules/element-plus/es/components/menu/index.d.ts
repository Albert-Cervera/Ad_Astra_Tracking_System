export declare const ElMenu: import("../../utils/types").SFCWithInstall<import("vue").DefineComponent<{
    readonly mode: {
        readonly type: import("vue").PropType<"horizontal" | "vertical">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "vertical";
    };
    readonly defaultActive: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "";
    };
    readonly defaultOpeneds: {
        readonly type: import("vue").PropType<string[]>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: () => [];
    };
    readonly uniqueOpened: BooleanConstructor;
    readonly router: BooleanConstructor;
    readonly menuTrigger: {
        readonly type: import("vue").PropType<"click" | "hover">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "hover";
    };
    readonly collapse: BooleanConstructor;
    readonly backgroundColor: StringConstructor;
    readonly textColor: StringConstructor;
    readonly activeTextColor: StringConstructor;
    readonly collapseTransition: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: true;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    close: (index: string, indexPath: string[]) => boolean;
    open: (index: string, indexPath: string[]) => boolean;
    select: (index: string, indexPath: string[], item: import("./src/types").MenuItemClicked, routerResult?: Promise<void | import("vue-router").NavigationFailure>) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly mode?: unknown;
    readonly defaultActive?: unknown;
    readonly defaultOpeneds?: unknown;
    readonly uniqueOpened?: unknown;
    readonly router?: unknown;
    readonly menuTrigger?: unknown;
    readonly collapse?: unknown;
    readonly backgroundColor?: unknown;
    readonly textColor?: unknown;
    readonly activeTextColor?: unknown;
    readonly collapseTransition?: unknown;
} & {
    mode: "horizontal" | "vertical";
    collapse: boolean;
    defaultActive: string;
    defaultOpeneds: string[];
    uniqueOpened: boolean;
    router: boolean;
    menuTrigger: "click" | "hover";
    collapseTransition: boolean;
} & {
    backgroundColor?: string;
    textColor?: string;
    activeTextColor?: string;
}> & {
    onClose?: (index: string, indexPath: string[]) => any;
    onSelect?: (index: string, indexPath: string[], item: import("./src/types").MenuItemClicked, routerResult?: Promise<void | import("vue-router").NavigationFailure>) => any;
    onOpen?: (index: string, indexPath: string[]) => any;
}, {
    mode: "horizontal" | "vertical";
    collapse: boolean;
    defaultActive: string;
    defaultOpeneds: string[];
    uniqueOpened: boolean;
    router: boolean;
    menuTrigger: "click" | "hover";
    collapseTransition: boolean;
}>> & {
    MenuItem: import("vue").DefineComponent<{
        readonly index: {
            readonly type: StringConstructor;
            readonly default: any;
        };
        readonly route: {
            readonly type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            readonly required: false;
            readonly validator: (val: unknown) => boolean;
        } & {
            readonly default: undefined;
        };
        readonly disabled: BooleanConstructor;
    }, {
        Effect: typeof import("..").Effect;
        parentMenu: import("vue").ComputedRef<import("vue").ComponentInternalInstance>;
        rootMenu: import("./src/types").MenuProvider;
        paddingStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
        active: import("vue").ComputedRef<boolean>;
        handleClick: () => void;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        click: (item: import("./src/types").MenuItemRegistered) => boolean;
    }, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        readonly index?: unknown;
        readonly route?: unknown;
        readonly disabled?: unknown;
    } & {
        disabled: boolean;
    } & {
        index?: string;
        route?: undefined;
    }> & {
        onClick?: (item: import("./src/types").MenuItemRegistered) => any;
    }, {
        disabled: boolean;
        index: string;
        route: undefined;
    }>;
    MenuItemGroup: import("vue").DefineComponent<{
        readonly title: StringConstructor;
    }, {
        levelPadding: import("vue").ComputedRef<number>;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        readonly title?: unknown;
    } & {} & {
        title?: string;
    }>, {}>;
    SubMenu: import("vue").DefineComponent<{
        readonly index: {
            readonly type: StringConstructor;
            readonly required: true;
        };
        readonly showTimeout: {
            readonly type: import("vue").PropType<number>;
            readonly required: false;
            readonly validator: (val: unknown) => boolean;
        } & {
            readonly default: 300;
        };
        readonly hideTimeout: {
            readonly type: import("vue").PropType<number>;
            readonly required: false;
            readonly validator: (val: unknown) => boolean;
        } & {
            readonly default: 300;
        };
        readonly popperClass: StringConstructor;
        readonly disabled: BooleanConstructor;
        readonly popperAppendToBody: {
            readonly type: import("vue").PropType<boolean>;
            readonly required: false;
            readonly validator: (val: unknown) => boolean;
        } & {
            readonly default: undefined;
        };
    }, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        readonly index?: unknown;
        readonly showTimeout?: unknown;
        readonly hideTimeout?: unknown;
        readonly popperClass?: unknown;
        readonly disabled?: unknown;
        readonly popperAppendToBody?: unknown;
    } & {
        disabled: boolean;
        index: string;
        showTimeout: number;
        hideTimeout: number;
    } & {
        popperClass?: string;
        popperAppendToBody?: boolean;
    }>, {
        disabled: boolean;
        popperAppendToBody: boolean;
        showTimeout: number;
        hideTimeout: number;
    }>;
};
export default ElMenu;
export declare const ElMenuItem: import("../../utils/types").SFCWithInstall<import("vue").DefineComponent<{
    readonly index: {
        readonly type: StringConstructor;
        readonly default: any;
    };
    readonly route: {
        readonly type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: undefined;
    };
    readonly disabled: BooleanConstructor;
}, {
    Effect: typeof import("..").Effect;
    parentMenu: import("vue").ComputedRef<import("vue").ComponentInternalInstance>;
    rootMenu: import("./src/types").MenuProvider;
    paddingStyle: import("vue").ComputedRef<import("vue").CSSProperties>;
    active: import("vue").ComputedRef<boolean>;
    handleClick: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    click: (item: import("./src/types").MenuItemRegistered) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly index?: unknown;
    readonly route?: unknown;
    readonly disabled?: unknown;
} & {
    disabled: boolean;
} & {
    index?: string;
    route?: undefined;
}> & {
    onClick?: (item: import("./src/types").MenuItemRegistered) => any;
}, {
    disabled: boolean;
    index: string;
    route: undefined;
}>>;
export declare const ElMenuItemGroup: import("../../utils/types").SFCWithInstall<import("vue").DefineComponent<{
    readonly title: StringConstructor;
}, {
    levelPadding: import("vue").ComputedRef<number>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly title?: unknown;
} & {} & {
    title?: string;
}>, {}>>;
export declare const ElSubMenu: import("../../utils/types").SFCWithInstall<import("vue").DefineComponent<{
    readonly index: {
        readonly type: StringConstructor;
        readonly required: true;
    };
    readonly showTimeout: {
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: 300;
    };
    readonly hideTimeout: {
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: 300;
    };
    readonly popperClass: StringConstructor;
    readonly disabled: BooleanConstructor;
    readonly popperAppendToBody: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: undefined;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly index?: unknown;
    readonly showTimeout?: unknown;
    readonly hideTimeout?: unknown;
    readonly popperClass?: unknown;
    readonly disabled?: unknown;
    readonly popperAppendToBody?: unknown;
} & {
    disabled: boolean;
    index: string;
    showTimeout: number;
    hideTimeout: number;
} & {
    popperClass?: string;
    popperAppendToBody?: boolean;
}>, {
    disabled: boolean;
    popperAppendToBody: boolean;
    showTimeout: number;
    hideTimeout: number;
}>>;
export * from './src/menu';
export * from './src/menu-item';
export * from './src/menu-item-group';
export * from './src/sub-menu';
export * from './src/types';
