import type { ItemSize } from '../types';
declare const FixedSizeGrid: import("vue").DefineComponent<{
    className: {
        type: import("vue").PropType<string>;
        default: string;
    };
    containerElement: {
        type: (ObjectConstructor | StringConstructor)[];
        default: string;
    };
    data: {
        type: import("vue").PropType<any[]>;
        default: () => any[];
    };
    direction: {
        type: import("vue").PropType<import("../types").Direction>;
        default: string;
        validator: (val: import("../types").Direction) => boolean;
    };
    height: {
        readonly type: import("vue").PropType<string | number>;
        readonly required: true;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default?: undefined;
    };
    innerElement: {
        type: (ObjectConstructor | StringConstructor)[];
        default: string;
    };
    style: {
        type: import("vue").PropType<import("../../../../utils/types").StyleValue>;
    };
    useIsScrolling: {
        type: BooleanConstructor;
        default: boolean;
    };
    width: {
        readonly type: import("vue").PropType<string | number>;
        readonly required: true;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default?: undefined;
    };
    perfMode: {
        type: BooleanConstructor;
        default: boolean;
    };
    columnCache: {
        type: import("vue").PropType<number>;
        default: number;
    };
    columnWidth: {
        type: import("vue").PropType<number | ItemSize>;
        required: boolean;
    };
    estimatedColumnWidth: {
        type: import("vue").PropType<number>;
    };
    estimatedRowHeight: {
        type: import("vue").PropType<number>;
    };
    initScrollLeft: {
        type: NumberConstructor;
        default: number;
    };
    initScrollTop: {
        type: NumberConstructor;
        default: number;
    };
    rowCache: {
        type: import("vue").PropType<number>;
        default: number;
    };
    rowHeight: {
        type: import("vue").PropType<number | ItemSize>;
        required: boolean;
    };
    totalColumn: {
        readonly type: import("vue").PropType<number>;
        readonly required: true;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default?: undefined;
    };
    totalRow: {
        readonly type: import("vue").PropType<number>;
        readonly required: true;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default?: undefined;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("scroll" | "item-rendered")[], "scroll" | "item-rendered", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    className?: unknown;
    containerElement?: unknown;
    data?: unknown;
    direction?: unknown;
    height?: unknown;
    innerElement?: unknown;
    style?: unknown;
    useIsScrolling?: unknown;
    width?: unknown;
    perfMode?: unknown;
    columnCache?: unknown;
    columnWidth?: unknown;
    estimatedColumnWidth?: unknown;
    estimatedRowHeight?: unknown;
    initScrollLeft?: unknown;
    initScrollTop?: unknown;
    rowCache?: unknown;
    rowHeight?: unknown;
    totalColumn?: unknown;
    totalRow?: unknown;
} & {
    height: string | number;
    width: string | number;
    data: any[];
    direction: import("../types").Direction;
    className: string;
    containerElement: string | Record<string, any>;
    innerElement: string | Record<string, any>;
    useIsScrolling: boolean;
    perfMode: boolean;
    columnCache: number;
    initScrollLeft: number;
    initScrollTop: number;
    rowCache: number;
    totalColumn: number;
    totalRow: number;
} & {
    style?: unknown;
    columnWidth?: number | ItemSize;
    estimatedColumnWidth?: number;
    estimatedRowHeight?: number;
    rowHeight?: number | ItemSize;
}> & {
    onScroll?: (...args: any[]) => any;
    "onItem-rendered"?: (...args: any[]) => any;
}, {
    data: any[];
    direction: import("../types").Direction;
    className: string;
    containerElement: string | Record<string, any>;
    innerElement: string | Record<string, any>;
    useIsScrolling: boolean;
    perfMode: boolean;
    columnCache: number;
    initScrollLeft: number;
    initScrollTop: number;
    rowCache: number;
}>;
export default FixedSizeGrid;
