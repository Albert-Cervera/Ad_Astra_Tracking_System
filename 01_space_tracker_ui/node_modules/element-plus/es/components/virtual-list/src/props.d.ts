import type { ExtractPropTypes, PropType } from 'vue';
import type { StyleValue } from 'element-plus/es/utils/types';
import type { Direction, LayoutDirection, ItemSize } from './types';
export declare const virtualizedProps: {
    className: {
        type: PropType<string>;
        default: string;
    };
    containerElement: {
        type: (ObjectConstructor | StringConstructor)[];
        default: string;
    };
    data: {
        type: PropType<any[]>;
        default: () => any[];
    };
    direction: {
        type: PropType<Direction>;
        default: string;
        validator: (val: Direction) => boolean;
    };
    height: {
        readonly type: PropType<string | number>;
        readonly required: true;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default?: undefined;
    };
    innerElement: {
        type: (ObjectConstructor | StringConstructor)[];
        default: string;
    };
    style: {
        type: PropType<StyleValue>;
    };
    useIsScrolling: {
        type: BooleanConstructor;
        default: boolean;
    };
    width: {
        readonly type: PropType<string | number>;
        readonly required: true;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default?: undefined;
    };
    perfMode: {
        type: BooleanConstructor;
        default: boolean;
    };
};
export declare const virtualizedListProps: {
    className: {
        type: PropType<string>;
        default: string;
    };
    containerElement: {
        type: (ObjectConstructor | StringConstructor)[];
        default: string;
    };
    data: {
        type: PropType<any[]>;
        default: () => any[];
    };
    direction: {
        type: PropType<Direction>;
        default: string;
        validator: (val: Direction) => boolean;
    };
    height: {
        readonly type: PropType<string | number>;
        readonly required: true;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default?: undefined;
    };
    innerElement: {
        type: (ObjectConstructor | StringConstructor)[];
        default: string;
    };
    style: {
        type: PropType<StyleValue>;
    };
    useIsScrolling: {
        type: BooleanConstructor;
        default: boolean;
    };
    width: {
        readonly type: PropType<string | number>;
        readonly required: true;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default?: undefined;
    };
    perfMode: {
        type: BooleanConstructor;
        default: boolean;
    };
    cache: {
        type: PropType<number>;
        default: number;
    };
    estimatedItemSize: {
        type: PropType<number>;
    };
    layout: {
        type: PropType<LayoutDirection>;
        default: string;
    };
    initScrollOffset: {
        type: NumberConstructor;
        default: number;
    };
    total: {
        readonly type: PropType<number>;
        readonly required: true;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default?: undefined;
    };
    itemSize: {
        type: PropType<number | ItemSize>;
        required: boolean;
    };
};
export declare const virtualizedGridProps: {
    className: {
        type: PropType<string>;
        default: string;
    };
    containerElement: {
        type: (ObjectConstructor | StringConstructor)[];
        default: string;
    };
    data: {
        type: PropType<any[]>;
        default: () => any[];
    };
    direction: {
        type: PropType<Direction>;
        default: string;
        validator: (val: Direction) => boolean;
    };
    height: {
        readonly type: PropType<string | number>;
        readonly required: true;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default?: undefined;
    };
    innerElement: {
        type: (ObjectConstructor | StringConstructor)[];
        default: string;
    };
    style: {
        type: PropType<StyleValue>;
    };
    useIsScrolling: {
        type: BooleanConstructor;
        default: boolean;
    };
    width: {
        readonly type: PropType<string | number>;
        readonly required: true;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default?: undefined;
    };
    perfMode: {
        type: BooleanConstructor;
        default: boolean;
    };
    columnCache: {
        type: PropType<number>;
        default: number;
    };
    columnWidth: {
        type: PropType<number | ItemSize>;
        required: boolean;
    };
    estimatedColumnWidth: {
        type: PropType<number>;
    };
    estimatedRowHeight: {
        type: PropType<number>;
    };
    initScrollLeft: {
        type: NumberConstructor;
        default: number;
    };
    initScrollTop: {
        type: NumberConstructor;
        default: number;
    };
    rowCache: {
        type: PropType<number>;
        default: number;
    };
    rowHeight: {
        type: PropType<number | ItemSize>;
        required: boolean;
    };
    totalColumn: {
        readonly type: PropType<number>;
        readonly required: true;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default?: undefined;
    };
    totalRow: {
        readonly type: PropType<number>;
        readonly required: true;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default?: undefined;
    };
};
export declare const virtualizedScrollbarProps: {
    layout: {
        type: PropType<LayoutDirection>;
        default: string;
    };
    total: {
        readonly type: PropType<number>;
        readonly required: true;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default?: undefined;
    };
    ratio: {
        type: NumberConstructor;
        required: boolean;
    };
    clientSize: {
        type: NumberConstructor;
        required: boolean;
    };
    scrollFrom: {
        type: NumberConstructor;
        required: boolean;
    };
    visible: BooleanConstructor;
};
export declare type VirtualizedProps = ExtractPropTypes<typeof virtualizedProps>;
export declare type VirtualizedListProps = ExtractPropTypes<typeof virtualizedListProps>;
export declare type VirtualizedGridProps = ExtractPropTypes<typeof virtualizedGridProps>;
export declare type VirtualizedScrollbarProps = ExtractPropTypes<typeof virtualizedScrollbarProps>;
