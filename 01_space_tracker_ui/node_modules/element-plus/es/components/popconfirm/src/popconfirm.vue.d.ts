import { Effect } from 'element-plus/es/components/popper';
declare const _default: import("vue").DefineComponent<{
    readonly title: {
        readonly type: StringConstructor;
    };
    readonly confirmButtonText: {
        readonly type: StringConstructor;
    };
    readonly cancelButtonText: {
        readonly type: StringConstructor;
    };
    readonly confirmButtonType: {
        readonly default: "primary";
        readonly type: import("vue").PropType<"" | "default" | "text" | "success" | "warning" | "info" | "primary" | "danger">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    };
    readonly cancelButtonType: {
        readonly default: "text";
        readonly type: import("vue").PropType<"" | "default" | "text" | "success" | "warning" | "info" | "primary" | "danger">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    };
    readonly icon: {
        readonly type: StringConstructor;
        readonly default: "el-icon-question";
    };
    readonly iconColor: {
        readonly type: StringConstructor;
        readonly default: "#f90";
    };
    readonly hideIcon: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
}, {
    Effect: typeof Effect;
    visible: import("vue").Ref<boolean>;
    finalConfirmButtonText: import("vue").ComputedRef<string>;
    finalCancelButtonText: import("vue").ComputedRef<string>;
    confirm: () => void;
    cancel: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    confirm: () => boolean;
    cancel: () => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly title?: unknown;
    readonly confirmButtonText?: unknown;
    readonly cancelButtonText?: unknown;
    readonly confirmButtonType?: unknown;
    readonly cancelButtonType?: unknown;
    readonly icon?: unknown;
    readonly iconColor?: unknown;
    readonly hideIcon?: unknown;
} & {
    icon: string;
    confirmButtonType: "" | "default" | "text" | "success" | "warning" | "info" | "primary" | "danger";
    cancelButtonType: "" | "default" | "text" | "success" | "warning" | "info" | "primary" | "danger";
    iconColor: string;
    hideIcon: boolean;
} & {
    title?: string;
    confirmButtonText?: string;
    cancelButtonText?: string;
}> & {
    onConfirm?: () => any;
    onCancel?: () => any;
}, {
    icon: string;
    confirmButtonType: "" | "default" | "text" | "success" | "warning" | "info" | "primary" | "danger";
    cancelButtonType: "" | "default" | "text" | "success" | "warning" | "info" | "primary" | "danger";
    iconColor: string;
    hideIcon: boolean;
}>;
export default _default;
