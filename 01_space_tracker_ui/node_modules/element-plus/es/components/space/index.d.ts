import type { SFCWithInstall } from 'element-plus/es/utils/types';
declare const _Space: SFCWithInstall<import("vue").DefineComponent<{
    direction: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: string;
    };
    class: {
        type: (ArrayConstructor | ObjectConstructor | StringConstructor)[];
        default: string;
    };
    style: {
        type: import("vue").PropType<string | any[] | import("vue").CSSProperties>;
    };
    alignment: {
        type: import("vue").PropType<"">;
        default: string;
    };
    prefixCls: {
        type: StringConstructor;
    };
    spacer: {
        type: import("vue").PropType<import("vue").VNodeChild>;
        default: any;
        validator: (val: unknown) => boolean;
    };
    wrap: {
        type: BooleanConstructor;
        default: boolean;
    };
    fill: {
        type: BooleanConstructor;
        default: boolean;
    };
    fillRatio: {
        type: NumberConstructor;
        default: number;
    };
    size: {
        type: import("vue").PropType<number | import("element-plus/es/utils/types").ComponentSize | [number, number]>;
        validator: (val: unknown) => boolean;
    };
}, {
    classes: import("vue").ComputedRef<(string | Record<string, any>)[]>;
    containerStyle: import("vue").ComputedRef<import("vue").CSSProperties[]>;
    itemStyle: import("vue").ComputedRef<import("vue").CSSProperties[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    direction?: unknown;
    class?: unknown;
    style?: unknown;
    alignment?: unknown;
    prefixCls?: unknown;
    spacer?: unknown;
    wrap?: unknown;
    fill?: unknown;
    fillRatio?: unknown;
    size?: unknown;
} & {
    fill: boolean;
    class: string | unknown[] | Record<string, any>;
    direction: "horizontal" | "vertical";
    wrap: boolean;
    alignment: "";
    fillRatio: number;
} & {
    style?: unknown;
    size?: number | import("element-plus/es/utils/types").ComponentSize | [number, number];
    prefixCls?: string;
    spacer?: import("vue").VNodeChild;
}>, {
    fill: boolean;
    class: string | unknown[] | Record<string, any>;
    direction: "horizontal" | "vertical";
    wrap: boolean;
    alignment: "";
    spacer: import("vue").VNodeChild;
    fillRatio: number;
}>>;
export default _Space;
export declare const ElSpace: SFCWithInstall<import("vue").DefineComponent<{
    direction: {
        type: import("vue").PropType<"horizontal" | "vertical">;
        default: string;
    };
    class: {
        type: (ArrayConstructor | ObjectConstructor | StringConstructor)[];
        default: string;
    };
    style: {
        type: import("vue").PropType<string | any[] | import("vue").CSSProperties>;
    };
    alignment: {
        type: import("vue").PropType<"">;
        default: string;
    };
    prefixCls: {
        type: StringConstructor;
    };
    spacer: {
        type: import("vue").PropType<import("vue").VNodeChild>;
        default: any;
        validator: (val: unknown) => boolean;
    };
    wrap: {
        type: BooleanConstructor;
        default: boolean;
    };
    fill: {
        type: BooleanConstructor;
        default: boolean;
    };
    fillRatio: {
        type: NumberConstructor;
        default: number;
    };
    size: {
        type: import("vue").PropType<number | import("element-plus/es/utils/types").ComponentSize | [number, number]>;
        validator: (val: unknown) => boolean;
    };
}, {
    classes: import("vue").ComputedRef<(string | Record<string, any>)[]>;
    containerStyle: import("vue").ComputedRef<import("vue").CSSProperties[]>;
    itemStyle: import("vue").ComputedRef<import("vue").CSSProperties[]>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    direction?: unknown;
    class?: unknown;
    style?: unknown;
    alignment?: unknown;
    prefixCls?: unknown;
    spacer?: unknown;
    wrap?: unknown;
    fill?: unknown;
    fillRatio?: unknown;
    size?: unknown;
} & {
    fill: boolean;
    class: string | unknown[] | Record<string, any>;
    direction: "horizontal" | "vertical";
    wrap: boolean;
    alignment: "";
    fillRatio: number;
} & {
    style?: unknown;
    size?: number | import("element-plus/es/utils/types").ComponentSize | [number, number];
    prefixCls?: string;
    spacer?: import("vue").VNodeChild;
}>, {
    fill: boolean;
    class: string | unknown[] | Record<string, any>;
    direction: "horizontal" | "vertical";
    wrap: boolean;
    alignment: "";
    spacer: import("vue").VNodeChild;
    fillRatio: number;
}>>;
