declare const _default: import("vue").DefineComponent<{
    readonly appendToBody: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly beforeClose: {
        readonly type: import("vue").PropType<(...args: any[]) => void>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: undefined;
    };
    readonly destroyOnClose: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly center: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly customClass: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly closeOnClickModal: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly closeOnPressEscape: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly fullscreen: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly lockScroll: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly modal: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly showClose: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly title: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly openDelay: {
        readonly type: NumberConstructor;
        readonly default: 0;
    };
    readonly closeDelay: {
        readonly type: NumberConstructor;
        readonly default: 0;
    };
    readonly top: {
        readonly type: StringConstructor;
    };
    readonly modelValue: {
        readonly type: BooleanConstructor;
        readonly required: true;
    };
    readonly modalClass: StringConstructor;
    readonly width: {
        readonly type: import("vue").PropType<string | number>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: undefined;
    };
    readonly zIndex: {
        readonly type: NumberConstructor;
    };
}, {
    afterEnter: () => void;
    afterLeave: () => void;
    beforeLeave: () => void;
    handleClose: () => void;
    onModalClick: () => void;
    closed: import("vue").Ref<boolean>;
    style: import("vue").ComputedRef<import("vue").CSSProperties>;
    rendered: import("vue").Ref<boolean>;
    visible: import("vue").Ref<boolean>;
    zIndex: import("vue").Ref<number>;
    dialogRef: import("vue").Ref<HTMLElement>;
    overlayEvent: {
        onClick: (e: MouseEvent) => void;
        onMousedown: (e: MouseEvent) => void;
        onMouseup: (e: MouseEvent) => void;
    };
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    open: () => boolean;
    opened: () => boolean;
    close: () => boolean;
    closed: () => boolean;
    "update:modelValue": (value: boolean) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly appendToBody?: unknown;
    readonly beforeClose?: unknown;
    readonly destroyOnClose?: unknown;
    readonly center?: unknown;
    readonly customClass?: unknown;
    readonly closeOnClickModal?: unknown;
    readonly closeOnPressEscape?: unknown;
    readonly fullscreen?: unknown;
    readonly lockScroll?: unknown;
    readonly modal?: unknown;
    readonly showClose?: unknown;
    readonly title?: unknown;
    readonly openDelay?: unknown;
    readonly closeDelay?: unknown;
    readonly top?: unknown;
    readonly modelValue?: unknown;
    readonly modalClass?: unknown;
    readonly width?: unknown;
    readonly zIndex?: unknown;
} & {
    title: string;
    center: boolean;
    modelValue: boolean;
    appendToBody: boolean;
    showClose: boolean;
    destroyOnClose: boolean;
    customClass: string;
    closeOnClickModal: boolean;
    closeOnPressEscape: boolean;
    fullscreen: boolean;
    lockScroll: boolean;
    modal: boolean;
    openDelay: number;
    closeDelay: number;
} & {
    width?: string | number;
    top?: string;
    zIndex?: number;
    beforeClose?: (...args: any[]) => void;
    modalClass?: string;
}> & {
    onClose?: () => any;
    "onUpdate:modelValue"?: (value: boolean) => any;
    onOpen?: () => any;
    onOpened?: () => any;
    onClosed?: () => any;
}, {
    width: string | number;
    title: string;
    center: boolean;
    appendToBody: boolean;
    showClose: boolean;
    beforeClose: (...args: any[]) => void;
    destroyOnClose: boolean;
    customClass: string;
    closeOnClickModal: boolean;
    closeOnPressEscape: boolean;
    fullscreen: boolean;
    lockScroll: boolean;
    modal: boolean;
    openDelay: number;
    closeDelay: number;
}>;
export default _default;
