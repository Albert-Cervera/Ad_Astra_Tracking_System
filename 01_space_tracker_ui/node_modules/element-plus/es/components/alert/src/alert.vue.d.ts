declare const _default: import("vue").DefineComponent<{
    readonly title: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly description: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly type: {
        readonly type: import("vue").PropType<"error" | "success" | "warning" | "info">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "info";
    };
    readonly closable: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly closeText: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly showIcon: BooleanConstructor;
    readonly center: BooleanConstructor;
    readonly effect: {
        readonly type: import("vue").PropType<"light" | "dark">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "light";
    };
}, {
    visible: import("vue").Ref<boolean>;
    typeClass: import("vue").ComputedRef<string>;
    iconClass: import("vue").ComputedRef<"el-icon-success" | "el-icon-warning" | "el-icon-error" | "el-icon-info">;
    isBigIcon: import("vue").ComputedRef<"" | "is-big">;
    isBoldTitle: import("vue").ComputedRef<"" | "is-bold">;
    close: (evt: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    close: (evt: MouseEvent) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly title?: unknown;
    readonly description?: unknown;
    readonly type?: unknown;
    readonly closable?: unknown;
    readonly closeText?: unknown;
    readonly showIcon?: unknown;
    readonly center?: unknown;
    readonly effect?: unknown;
} & {
    description: string;
    type: "error" | "success" | "warning" | "info";
    title: string;
    closable: boolean;
    closeText: string;
    showIcon: boolean;
    center: boolean;
    effect: "light" | "dark";
} & {}> & {
    onClose?: (evt: MouseEvent) => any;
}, {
    description: string;
    type: "error" | "success" | "warning" | "info";
    title: string;
    closable: boolean;
    closeText: string;
    showIcon: boolean;
    center: boolean;
    effect: "light" | "dark";
}>;
export default _default;
