declare const _default: import("vue").DefineComponent<{
    readonly type: {
        readonly type: import("vue").PropType<"default" | "success" | "warning" | "info" | "primary" | "danger">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "default";
    };
    readonly underline: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly disabled: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly href: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly icon: {
        readonly type: StringConstructor;
        readonly default: "";
    };
}, {
    handleClick: (event: MouseEvent) => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    click: (evt: MouseEvent) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly type?: unknown;
    readonly underline?: unknown;
    readonly disabled?: unknown;
    readonly href?: unknown;
    readonly icon?: unknown;
} & {
    type: "default" | "success" | "warning" | "info" | "primary" | "danger";
    disabled: boolean;
    icon: string;
    underline: boolean;
    href: string;
} & {}> & {
    onClick?: (evt: MouseEvent) => any;
}, {
    type: "default" | "success" | "warning" | "info" | "primary" | "danger";
    disabled: boolean;
    icon: string;
    underline: boolean;
    href: string;
}>;
export default _default;
