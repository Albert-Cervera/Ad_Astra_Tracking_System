import type { SFCWithInstall } from 'element-plus/es/utils/types';
declare const _ColorPicker: SFCWithInstall<import("vue").DefineComponent<{
    modelValue: StringConstructor;
    showAlpha: BooleanConstructor;
    colorFormat: StringConstructor;
    disabled: BooleanConstructor;
    size: {
        type: import("vue").PropType<import("element-plus/es/utils/types").ComponentSize>;
        validator: (val: string) => boolean;
    };
    popperClass: StringConstructor;
    predefine: ArrayConstructor;
}, {
    Effect: typeof import("..").Effect;
    color: import("./src/color").default;
    colorDisabled: import("vue").ComputedRef<boolean>;
    colorSize: import("vue").ComputedRef<any>;
    displayedColor: import("vue").ComputedRef<string>;
    showPanelColor: import("vue").Ref<boolean>;
    showPicker: import("vue").Ref<boolean>;
    customInput: import("vue").Ref<string>;
    handleConfirm: () => void;
    hide: () => void;
    handleTrigger: () => void;
    clear: () => void;
    confirmValue: () => void;
    t: (...args: any[]) => string;
    hue: any;
    svPanel: any;
    alpha: any;
    popper: any;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue" | "active-change")[], "change" | "update:modelValue" | "active-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    showAlpha?: unknown;
    colorFormat?: unknown;
    disabled?: unknown;
    size?: unknown;
    popperClass?: unknown;
    predefine?: unknown;
} & {
    disabled: boolean;
    showAlpha: boolean;
} & {
    modelValue?: string;
    size?: import("element-plus/es/utils/types").ComponentSize;
    popperClass?: string;
    colorFormat?: string;
    predefine?: unknown[];
}> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
    "onActive-change"?: (...args: any[]) => any;
}, {
    disabled: boolean;
    showAlpha: boolean;
}>>;
export default _ColorPicker;
export declare const ElColorPicker: SFCWithInstall<import("vue").DefineComponent<{
    modelValue: StringConstructor;
    showAlpha: BooleanConstructor;
    colorFormat: StringConstructor;
    disabled: BooleanConstructor;
    size: {
        type: import("vue").PropType<import("element-plus/es/utils/types").ComponentSize>;
        validator: (val: string) => boolean;
    };
    popperClass: StringConstructor;
    predefine: ArrayConstructor;
}, {
    Effect: typeof import("..").Effect;
    color: import("./src/color").default;
    colorDisabled: import("vue").ComputedRef<boolean>;
    colorSize: import("vue").ComputedRef<any>;
    displayedColor: import("vue").ComputedRef<string>;
    showPanelColor: import("vue").Ref<boolean>;
    showPicker: import("vue").Ref<boolean>;
    customInput: import("vue").Ref<string>;
    handleConfirm: () => void;
    hide: () => void;
    handleTrigger: () => void;
    clear: () => void;
    confirmValue: () => void;
    t: (...args: any[]) => string;
    hue: any;
    svPanel: any;
    alpha: any;
    popper: any;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("change" | "update:modelValue" | "active-change")[], "change" | "update:modelValue" | "active-change", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    modelValue?: unknown;
    showAlpha?: unknown;
    colorFormat?: unknown;
    disabled?: unknown;
    size?: unknown;
    popperClass?: unknown;
    predefine?: unknown;
} & {
    disabled: boolean;
    showAlpha: boolean;
} & {
    modelValue?: string;
    size?: import("element-plus/es/utils/types").ComponentSize;
    popperClass?: string;
    colorFormat?: string;
    predefine?: unknown[];
}> & {
    onChange?: (...args: any[]) => any;
    "onUpdate:modelValue"?: (...args: any[]) => any;
    "onActive-change"?: (...args: any[]) => any;
}, {
    disabled: boolean;
    showAlpha: boolean;
}>>;
