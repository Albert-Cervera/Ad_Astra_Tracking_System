import type { CSSProperties } from 'vue';
import type { NotificationProps } from './notification';
export declare const typeMap: Record<NotificationProps['type'], string>;
declare const _default: import("vue").DefineComponent<{
    readonly customClass: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly dangerouslyUseHTMLString: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly duration: {
        readonly type: NumberConstructor;
        readonly default: 4500;
    };
    readonly iconClass: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly id: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly message: {
        readonly type: import("vue").PropType<string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: string;
    };
    readonly offset: {
        readonly type: NumberConstructor;
        readonly default: 0;
    };
    readonly onClick: {
        readonly type: import("vue").PropType<() => void>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: undefined;
    };
    readonly onClose: {
        readonly type: import("vue").PropType<() => void>;
        readonly required: true;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default?: undefined;
    };
    readonly position: {
        readonly type: import("vue").PropType<"top-right" | "top-left" | "bottom-right" | "bottom-left">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "top-right";
    };
    readonly showClose: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly title: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly type: {
        readonly type: import("vue").PropType<"" | "error" | "success" | "warning" | "info">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "";
    };
    readonly zIndex: {
        readonly type: NumberConstructor;
        readonly default: 0;
    };
}, {
    horizontalClass: import("vue").ComputedRef<"right" | "left">;
    typeClass: import("vue").ComputedRef<string>;
    positionStyle: import("vue").ComputedRef<CSSProperties>;
    visible: import("vue").Ref<boolean>;
    close: () => void;
    clearTimer: () => void;
    startTimer: () => void;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    destroy: () => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly customClass?: unknown;
    readonly dangerouslyUseHTMLString?: unknown;
    readonly duration?: unknown;
    readonly iconClass?: unknown;
    readonly id?: unknown;
    readonly message?: unknown;
    readonly offset?: unknown;
    readonly onClick?: unknown;
    readonly onClose?: unknown;
    readonly position?: unknown;
    readonly showClose?: unknown;
    readonly title?: unknown;
    readonly type?: unknown;
    readonly zIndex?: unknown;
} & {
    message: string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    type: "" | "error" | "success" | "warning" | "info";
    zIndex: number;
    offset: number;
    position: "top-right" | "top-left" | "bottom-right" | "bottom-left";
    title: string;
    onClose: () => void;
    iconClass: string;
    id: string;
    showClose: boolean;
    customClass: string;
    duration: number;
    dangerouslyUseHTMLString: boolean;
} & {
    onClick?: () => void;
}> & {
    onDestroy?: () => any;
}, {
    message: string | import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
        [key: string]: any;
    }>;
    type: "" | "error" | "success" | "warning" | "info";
    zIndex: number;
    offset: number;
    position: "top-right" | "top-left" | "bottom-right" | "bottom-left";
    title: string;
    iconClass: string;
    onClick: () => void;
    id: string;
    showClose: boolean;
    customClass: string;
    duration: number;
    dangerouslyUseHTMLString: boolean;
}>;
export default _default;
