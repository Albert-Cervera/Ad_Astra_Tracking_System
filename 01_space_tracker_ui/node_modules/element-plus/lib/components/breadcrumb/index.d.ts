export declare const ElBreadcrumb: import("../../utils/types").SFCWithInstall<import("vue").DefineComponent<{
    readonly separator: {
        readonly type: StringConstructor;
        readonly default: "/";
    };
    readonly separatorClass: {
        readonly type: StringConstructor;
        readonly default: "";
    };
}, {
    breadcrumb: import("vue").Ref<HTMLDivElement>;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly separator?: unknown;
    readonly separatorClass?: unknown;
} & {
    separator: string;
    separatorClass: string;
} & {}>, {
    separator: string;
    separatorClass: string;
}>> & {
    BreadcrumbItem: import("vue").DefineComponent<{
        readonly to: {
            readonly type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
            readonly required: false;
            readonly validator: (val: unknown) => boolean;
        } & {
            readonly default: "";
        };
        readonly replace: {
            readonly type: BooleanConstructor;
            readonly default: false;
        };
    }, {
        link: import("vue").Ref<HTMLSpanElement>;
        separator: string;
        separatorClass: string;
    }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
        readonly to?: unknown;
        readonly replace?: unknown;
    } & {
        replace: boolean;
        to: "";
    } & {}>, {
        replace: boolean;
        to: "";
    }>;
};
export declare const ElBreadcrumbItem: import("../../utils/types").SFCWithInstall<import("vue").DefineComponent<{
    readonly to: {
        readonly type: import("vue").PropType<import("vue-router").RouteLocationRaw>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "";
    };
    readonly replace: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
}, {
    link: import("vue").Ref<HTMLSpanElement>;
    separator: string;
    separatorClass: string;
}, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly to?: unknown;
    readonly replace?: unknown;
} & {
    replace: boolean;
    to: "";
} & {}>, {
    replace: boolean;
    to: "";
}>>;
export default ElBreadcrumb;
export * from './src/breadcrumb';
export * from './src/breadcrumb-item';
