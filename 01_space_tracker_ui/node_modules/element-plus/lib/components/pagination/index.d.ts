export declare const ElPagination: import("../../utils/types").SFCWithInstall<import("vue").DefineComponent<{
    readonly total: NumberConstructor;
    readonly pageSize: NumberConstructor;
    readonly defaultPageSize: NumberConstructor;
    readonly currentPage: NumberConstructor;
    readonly defaultCurrentPage: NumberConstructor;
    readonly pageCount: NumberConstructor;
    readonly pagerCount: {
        readonly type: NumberConstructor;
        readonly validator: (value: unknown) => boolean;
        readonly default: 7;
    };
    readonly layout: {
        readonly type: StringConstructor;
        readonly default: string;
    };
    readonly pageSizes: {
        readonly type: import("vue").PropType<number[]>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: () => [10, 20, 30, 40, 50, 100];
    };
    readonly popperClass: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly prevText: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly nextText: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly small: BooleanConstructor;
    readonly background: BooleanConstructor;
    readonly disabled: BooleanConstructor;
    readonly hideOnSinglePage: BooleanConstructor;
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    'update:current-page': (val: number) => boolean;
    'update:page-size': (val: number) => boolean;
    'size-change': (val: number) => boolean;
    'current-change': (val: number) => boolean;
    'prev-click': (val: number) => boolean;
    'next-click': (val: number) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly total?: unknown;
    readonly pageSize?: unknown;
    readonly defaultPageSize?: unknown;
    readonly currentPage?: unknown;
    readonly defaultCurrentPage?: unknown;
    readonly pageCount?: unknown;
    readonly pagerCount?: unknown;
    readonly layout?: unknown;
    readonly pageSizes?: unknown;
    readonly popperClass?: unknown;
    readonly prevText?: unknown;
    readonly nextText?: unknown;
    readonly small?: unknown;
    readonly background?: unknown;
    readonly disabled?: unknown;
    readonly hideOnSinglePage?: unknown;
} & {
    small: boolean;
    disabled: boolean;
    popperClass: string;
    background: boolean;
    layout: string;
    prevText: string;
    nextText: string;
    pageSizes: number[];
    pagerCount: number;
    hideOnSinglePage: boolean;
} & {
    total?: number;
    currentPage?: number;
    pageCount?: number;
    pageSize?: number;
    defaultPageSize?: number;
    defaultCurrentPage?: number;
}> & {
    "onUpdate:current-page"?: (val: number) => any;
    "onUpdate:page-size"?: (val: number) => any;
    "onSize-change"?: (val: number) => any;
    "onCurrent-change"?: (val: number) => any;
    "onPrev-click"?: (val: number) => any;
    "onNext-click"?: (val: number) => any;
}, {
    small: boolean;
    disabled: boolean;
    popperClass: string;
    background: boolean;
    layout: string;
    prevText: string;
    nextText: string;
    pageSizes: number[];
    pagerCount: number;
    hideOnSinglePage: boolean;
}>> & Record<string, any>;
export default ElPagination;
export * from './src/pagination';
