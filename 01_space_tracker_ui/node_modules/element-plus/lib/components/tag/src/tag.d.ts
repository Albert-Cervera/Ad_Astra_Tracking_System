import type { ExtractPropTypes } from 'vue';
export declare const tagProps: {
    readonly closable: BooleanConstructor;
    readonly type: {
        readonly type: import("vue").PropType<"" | "success" | "warning" | "info" | "danger">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "";
    };
    readonly hit: BooleanConstructor;
    readonly disableTransitions: BooleanConstructor;
    readonly color: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly size: {
        readonly type: import("vue").PropType<"small" | "medium" | "mini">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: undefined;
    };
    readonly effect: {
        readonly type: import("vue").PropType<"light" | "dark" | "plain">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "light";
    };
};
export declare type TagProps = ExtractPropTypes<typeof tagProps>;
export declare const tagEmits: {
    close: (evt: MouseEvent) => boolean;
    click: (evt: MouseEvent) => boolean;
};
export declare type TagEmits = typeof tagEmits;
