import type { SFCWithInstall } from 'element-plus/es/utils/types';
declare const _Col: SFCWithInstall<import("vue").DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    span: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: NumberConstructor;
        default: number;
    };
    pull: {
        type: NumberConstructor;
        default: number;
    };
    push: {
        type: NumberConstructor;
        default: number;
    };
    xs: {
        type: import("vue").PropType<number | {
            span: number;
            offset: number;
        }>;
        default: () => {
            span: number;
            offset: number;
        };
    };
    sm: {
        type: import("vue").PropType<number | {
            span: number;
            offset: number;
        }>;
        default: () => {
            span: number;
            offset: number;
        };
    };
    md: {
        type: import("vue").PropType<number | {
            span: number;
            offset: number;
        }>;
        default: () => {
            span: number;
            offset: number;
        };
    };
    lg: {
        type: import("vue").PropType<number | {
            span: number;
            offset: number;
        }>;
        default: () => {
            span: number;
            offset: number;
        };
    };
    xl: {
        type: import("vue").PropType<number | {
            span: number;
            offset: number;
        }>;
        default: () => {
            span: number;
            offset: number;
        };
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    tag?: unknown;
    span?: unknown;
    offset?: unknown;
    pull?: unknown;
    push?: unknown;
    xs?: unknown;
    sm?: unknown;
    md?: unknown;
    lg?: unknown;
    xl?: unknown;
} & {
    offset: number;
    push: number;
    span: number;
    tag: string;
    pull: number;
    xs: number | {
        span: number;
        offset: number;
    };
    sm: number | {
        span: number;
        offset: number;
    };
    md: number | {
        span: number;
        offset: number;
    };
    lg: number | {
        span: number;
        offset: number;
    };
    xl: number | {
        span: number;
        offset: number;
    };
} & {}>, {
    offset: number;
    push: number;
    span: number;
    tag: string;
    pull: number;
    xs: number | {
        span: number;
        offset: number;
    };
    sm: number | {
        span: number;
        offset: number;
    };
    md: number | {
        span: number;
        offset: number;
    };
    lg: number | {
        span: number;
        offset: number;
    };
    xl: number | {
        span: number;
        offset: number;
    };
}>>;
export default _Col;
export declare const ElCol: SFCWithInstall<import("vue").DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    span: {
        type: NumberConstructor;
        default: number;
    };
    offset: {
        type: NumberConstructor;
        default: number;
    };
    pull: {
        type: NumberConstructor;
        default: number;
    };
    push: {
        type: NumberConstructor;
        default: number;
    };
    xs: {
        type: import("vue").PropType<number | {
            span: number;
            offset: number;
        }>;
        default: () => {
            span: number;
            offset: number;
        };
    };
    sm: {
        type: import("vue").PropType<number | {
            span: number;
            offset: number;
        }>;
        default: () => {
            span: number;
            offset: number;
        };
    };
    md: {
        type: import("vue").PropType<number | {
            span: number;
            offset: number;
        }>;
        default: () => {
            span: number;
            offset: number;
        };
    };
    lg: {
        type: import("vue").PropType<number | {
            span: number;
            offset: number;
        }>;
        default: () => {
            span: number;
            offset: number;
        };
    };
    xl: {
        type: import("vue").PropType<number | {
            span: number;
            offset: number;
        }>;
        default: () => {
            span: number;
            offset: number;
        };
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, Record<string, any>, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    tag?: unknown;
    span?: unknown;
    offset?: unknown;
    pull?: unknown;
    push?: unknown;
    xs?: unknown;
    sm?: unknown;
    md?: unknown;
    lg?: unknown;
    xl?: unknown;
} & {
    offset: number;
    push: number;
    span: number;
    tag: string;
    pull: number;
    xs: number | {
        span: number;
        offset: number;
    };
    sm: number | {
        span: number;
        offset: number;
    };
    md: number | {
        span: number;
        offset: number;
    };
    lg: number | {
        span: number;
        offset: number;
    };
    xl: number | {
        span: number;
        offset: number;
    };
} & {}>, {
    offset: number;
    push: number;
    span: number;
    tag: string;
    pull: number;
    xs: number | {
        span: number;
        offset: number;
    };
    sm: number | {
        span: number;
        offset: number;
    };
    md: number | {
        span: number;
        offset: number;
    };
    lg: number | {
        span: number;
        offset: number;
    };
    xl: number | {
        span: number;
        offset: number;
    };
}>>;
