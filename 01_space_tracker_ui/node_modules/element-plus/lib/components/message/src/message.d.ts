import type { VNode, ExtractPropTypes } from 'vue';
export declare const messageTypes: readonly ["success", "info", "warning", "error"];
export declare const messageProps: {
    readonly customClass: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly center: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly dangerouslyUseHTMLString: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly duration: {
        readonly type: NumberConstructor;
        readonly default: 3000;
    };
    readonly iconClass: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly id: {
        readonly type: StringConstructor;
        readonly default: "";
    };
    readonly message: {
        readonly type: import("vue").PropType<string | VNode<import("vue").RendererNode, import("vue").RendererElement, {
            [key: string]: any;
        }>>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "";
    };
    readonly onClose: {
        readonly type: import("vue").PropType<() => void>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: undefined;
    };
    readonly showClose: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly type: {
        readonly type: import("vue").PropType<"error" | "success" | "warning" | "info">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "info";
    };
    readonly offset: {
        readonly type: NumberConstructor;
        readonly default: 20;
    };
    readonly zIndex: {
        readonly type: NumberConstructor;
        readonly default: 0;
    };
};
export declare type MessageProps = ExtractPropTypes<typeof messageProps>;
export declare const messageEmits: {
    destroy: () => boolean;
};
export declare type MessageEmits = typeof messageEmits;
export declare type MessageOptions = Omit<MessageProps, 'id'>;
export declare type MessageOptionsTyped = Omit<MessageOptions, 'type'>;
export interface MessageHandle {
    close: () => void;
}
export declare type MessageParams = Partial<MessageOptions> | string | VNode;
export declare type MessageParamsTyped = Partial<MessageOptionsTyped> | string | VNode;
export declare type MessageFn = ((options?: MessageParams) => MessageHandle) & {
    closeAll(): void;
};
export declare type MessageTypedFn = (options?: MessageParamsTyped) => MessageHandle;
export interface Message extends MessageFn {
    success: MessageTypedFn;
    warning: MessageTypedFn;
    info: MessageTypedFn;
    error: MessageTypedFn;
}
declare type MessageQueueItem = {
    vm: VNode;
};
export declare type MessageQueue = MessageQueueItem[];
export {};
