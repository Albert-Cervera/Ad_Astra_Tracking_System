import type { InjectionKey } from 'vue';
import type { TreeNodeData } from '../../tree/src/tree.type';
import type { TreeNode, TreeKey, TreeData, TreeOptionProps, FilterMethod, CheckedInfo, TreeContext } from './types';
export declare const ROOT_TREE_INJECTION_KEY: InjectionKey<TreeContext>;
export declare enum TreeOptionsEnum {
    KEY = "id",
    LABEL = "label",
    CHILDREN = "children",
    DISABLED = "disabled"
}
export declare const enum SetOperationEnum {
    ADD = "add",
    DELETE = "delete"
}
export declare const treeProps: {
    readonly data: {
        readonly type: import("vue").PropType<TreeData>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: () => [];
    };
    readonly emptyText: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: undefined;
    };
    readonly height: {
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: number;
    };
    readonly props: {
        readonly type: import("vue").PropType<TreeOptionProps>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: () => import("../../../utils/types").Mutable<{
            readonly children: TreeOptionsEnum.CHILDREN;
            readonly label: TreeOptionsEnum.LABEL;
            readonly disabled: TreeOptionsEnum.DISABLED;
            readonly value: TreeOptionsEnum.KEY;
        }>;
    };
    readonly highlightCurrent: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly showCheckbox: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly defaultCheckedKeys: {
        readonly type: import("vue").PropType<TreeKey[]>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: () => [];
    };
    readonly checkStrictly: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly defaultExpandedKeys: {
        readonly type: import("vue").PropType<TreeKey[]>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: () => [];
    };
    readonly indent: {
        readonly type: import("vue").PropType<number>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: number;
    };
    readonly icon: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: undefined;
    };
    readonly expandOnClickNode: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly checkOnClickNode: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly currentNodeKey: {
        readonly type: import("vue").PropType<TreeKey>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: undefined;
    };
    readonly accordion: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly filterMethod: {
        readonly type: import("vue").PropType<FilterMethod>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: undefined;
    };
    readonly perfMode: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
};
export declare const treeNodeProps: {
    readonly node: {
        readonly type: import("vue").PropType<TreeNode>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: () => import("../../../utils/types").Mutable<{
            readonly key: -1;
            readonly level: -1;
            readonly data: {};
        }>;
    };
    readonly expanded: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly checked: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly indeterminate: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly showCheckbox: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly disabled: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly current: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
    readonly hiddenExpandIcon: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: boolean;
    };
};
export declare const treeNodeContentProps: {
    readonly node: {
        readonly type: import("vue").PropType<TreeNode>;
        readonly required: true;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default?: undefined;
    };
};
export declare const NODE_CLICK = "node-click";
export declare const NODE_EXPAND = "node-expand";
export declare const NODE_COLLAPSE = "node-collapse";
export declare const CURRENT_CHANGE = "current-change";
export declare const NODE_CHECK = "check";
export declare const NODE_CHECK_CHANGE = "check-change";
export declare const NODE_CONTEXTMENU = "node-contextmenu";
export declare const treeEmits: {
    "node-click": (data: TreeNodeData, node: TreeNode) => TreeNode;
    "node-expand": (data: TreeNodeData, node: TreeNode) => TreeNode;
    "node-collapse": (data: TreeNodeData, node: TreeNode) => TreeNode;
    "current-change": (data: TreeNodeData, node: TreeNode) => TreeNode;
    check: (data: TreeNodeData, checkedInfo: CheckedInfo) => CheckedInfo;
    "check-change": (data: TreeNodeData, checked: boolean) => boolean;
    "node-contextmenu": (event: Event, data: TreeNodeData, node: TreeNode) => TreeNode;
};
export declare const treeNodeEmits: {
    click: (node: TreeNode) => boolean;
    toggle: (node: TreeNode) => boolean;
    check: (node: TreeNode, checked: boolean) => boolean;
};
