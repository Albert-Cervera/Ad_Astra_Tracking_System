import type { MenuItemClicked } from './types';
import type { NavigationFailure } from 'vue-router';
import type { VNode, ExtractPropTypes } from 'vue';
export declare const menuProps: {
    readonly mode: {
        readonly type: import("vue").PropType<"horizontal" | "vertical">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "vertical";
    };
    readonly defaultActive: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "";
    };
    readonly defaultOpeneds: {
        readonly type: import("vue").PropType<string[]>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: () => [];
    };
    readonly uniqueOpened: BooleanConstructor;
    readonly router: BooleanConstructor;
    readonly menuTrigger: {
        readonly type: import("vue").PropType<"click" | "hover">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "hover";
    };
    readonly collapse: BooleanConstructor;
    readonly backgroundColor: StringConstructor;
    readonly textColor: StringConstructor;
    readonly activeTextColor: StringConstructor;
    readonly collapseTransition: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: true;
    };
};
export declare type MenuProps = ExtractPropTypes<typeof menuProps>;
export declare const menuEmits: {
    close: (index: string, indexPath: string[]) => boolean;
    open: (index: string, indexPath: string[]) => boolean;
    select: (index: string, indexPath: string[], item: MenuItemClicked, routerResult?: Promise<void | NavigationFailure>) => boolean;
};
export declare type MenuEmits = typeof menuEmits;
declare const _default: import("vue").DefineComponent<{
    readonly mode: {
        readonly type: import("vue").PropType<"horizontal" | "vertical">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "vertical";
    };
    readonly defaultActive: {
        readonly type: import("vue").PropType<string>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "";
    };
    readonly defaultOpeneds: {
        readonly type: import("vue").PropType<string[]>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: () => [];
    };
    readonly uniqueOpened: BooleanConstructor;
    readonly router: BooleanConstructor;
    readonly menuTrigger: {
        readonly type: import("vue").PropType<"click" | "hover">;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: "hover";
    };
    readonly collapse: BooleanConstructor;
    readonly backgroundColor: StringConstructor;
    readonly textColor: StringConstructor;
    readonly activeTextColor: StringConstructor;
    readonly collapseTransition: {
        readonly type: import("vue").PropType<boolean>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: true;
    };
}, () => VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    close: (index: string, indexPath: string[]) => boolean;
    open: (index: string, indexPath: string[]) => boolean;
    select: (index: string, indexPath: string[], item: MenuItemClicked, routerResult?: Promise<void | NavigationFailure>) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly mode?: unknown;
    readonly defaultActive?: unknown;
    readonly defaultOpeneds?: unknown;
    readonly uniqueOpened?: unknown;
    readonly router?: unknown;
    readonly menuTrigger?: unknown;
    readonly collapse?: unknown;
    readonly backgroundColor?: unknown;
    readonly textColor?: unknown;
    readonly activeTextColor?: unknown;
    readonly collapseTransition?: unknown;
} & {
    mode: "horizontal" | "vertical";
    collapse: boolean;
    defaultActive: string;
    defaultOpeneds: string[];
    uniqueOpened: boolean;
    router: boolean;
    menuTrigger: "click" | "hover";
    collapseTransition: boolean;
} & {
    backgroundColor?: string;
    textColor?: string;
    activeTextColor?: string;
}> & {
    onClose?: (index: string, indexPath: string[]) => any;
    onSelect?: (index: string, indexPath: string[], item: MenuItemClicked, routerResult?: Promise<void | NavigationFailure>) => any;
    onOpen?: (index: string, indexPath: string[]) => any;
}, {
    mode: "horizontal" | "vertical";
    collapse: boolean;
    defaultActive: string;
    defaultOpeneds: string[];
    uniqueOpened: boolean;
    router: boolean;
    menuTrigger: "click" | "hover";
    collapseTransition: boolean;
}>;
export default _default;
