export declare const ElOverlay: import("vue").DefineComponent<{
    readonly mask: {
        readonly type: BooleanConstructor;
        readonly default: true;
    };
    readonly customMaskEvent: {
        readonly type: BooleanConstructor;
        readonly default: false;
    };
    readonly overlayClass: {
        readonly type: import("vue").PropType<string | string[] | Record<string, boolean>>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: undefined;
    };
    readonly zIndex: {
        readonly type: import("vue").PropType<import("csstype").ZIndexProperty>;
        readonly required: false;
        readonly validator: (val: unknown) => boolean;
    } & {
        readonly default: undefined;
    };
}, () => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    click: (evt: MouseEvent) => boolean;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<{
    readonly mask?: unknown;
    readonly customMaskEvent?: unknown;
    readonly overlayClass?: unknown;
    readonly zIndex?: unknown;
} & {
    mask: boolean;
    customMaskEvent: boolean;
} & {
    zIndex?: import("csstype").ZIndexProperty;
    overlayClass?: string | string[] | Record<string, boolean>;
}> & {
    onClick?: (evt: MouseEvent) => any;
}, {
    zIndex: import("csstype").ZIndexProperty;
    mask: boolean;
    customMaskEvent: boolean;
    overlayClass: string | string[] | Record<string, boolean>;
}>;
export default ElOverlay;
export * from './src/overlay';
