{"remainingRequest":"/home/avocado/Documents/NASA/01_space_tracker_ui/node_modules/babel-loader/lib/index.js!/home/avocado/Documents/NASA/01_space_tracker_ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/avocado/Documents/NASA/01_space_tracker_ui/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/avocado/Documents/NASA/01_space_tracker_ui/src/components/Wallet.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/avocado/Documents/NASA/01_space_tracker_ui/src/components/Wallet.vue","mtime":1632874067632},{"path":"/home/avocado/Documents/NASA/01_space_tracker_ui/node_modules/cache-loader/dist/cjs.js","mtime":1630090222612},{"path":"/home/avocado/Documents/NASA/01_space_tracker_ui/node_modules/babel-loader/lib/index.js","mtime":1630090222596},{"path":"/home/avocado/Documents/NASA/01_space_tracker_ui/node_modules/cache-loader/dist/cjs.js","mtime":1630090222612},{"path":"/home/avocado/Documents/NASA/01_space_tracker_ui/node_modules/vue-loader-v16/dist/index.js","mtime":1630090234547}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/home/avocado/Documents/NASA/01_space_tracker_ui/src/components/Wallet.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <p><b>Wallet information</b></p>\n    <div v-if=\"walletAddress\">\n      <p>Address: {{ walletAddress }}</p>\n      <p>Balance: {{ balance }} ETH</p>\n      <p>Current Network: {{ network }}</p>\n      <button v-if=\"showUnlinkButton\" @click=\"onUnlinkAccount\">\n        Unlink account\n      </button>\n      <button @click=\"onDisconnect\">Disconnect</button>\n    </div>\n    <div v-else>\n      Connect your wallet:\n      <button @click=\"onConnect\">Connect</button>\n    </div>\n    <br />\n    <div v-if=\"owner\">\n      <p>Owner with address: {{ owner }}</p>\n      <p>from contract: {{ testAddress }}</p>\n    </div>\n  </div>\n</template>\n\n<script>\n  import { useStore } from 'vuex'\n  import { computed, ref, onMounted } from 'vue'\n\n  import web3Modal from '@/web3Modal'\n\n  import {\n    getUserInformation,\n    readTestContract,\n  } from '@/services/WalletService'\n  import { NETWORK_NAMES } from '../constants/walletConstants'\n  import { TEST_CONTRACT_ADDRESS } from '../constants/contractTest'\n\n  export default {\n    name: 'Wallet',\n\n    setup() {\n      const store = useStore()\n\n      const {\n        state: { user },\n        dispatch,\n      } = store\n\n      const owner = ref('')\n      const testAddress = TEST_CONTRACT_ADDRESS\n\n      const showUnlinkButton = ref(false)\n      const customProvider = ref(null)\n\n      const balance = computed(() => user.balance)\n      const walletAddress = computed(() => user.walletAddress)\n      const network = computed(() => NETWORK_NAMES[user.networkId])\n\n      const onConnect = async () => {\n        try {\n          const provider = await web3Modal.connect()\n          customProvider.value = provider\n\n          const userInformation = await getUserInformation(provider)\n          showUnlinkButton.value =\n            web3Modal.cachedProvider === 'custom-coinbase'\n\n          // console.log(userInformation)\n\n          dispatch('setWalletInformation', userInformation)\n\n          await subscribeProvider(provider)\n        } catch (error) {\n          console.error(error)\n        }\n      }\n\n      const readContract = async () => {\n        owner.value = await readTestContract()\n      }\n\n      const onUnlinkAccount = async () => {\n        const provider = customProvider.value\n\n        if (typeof provider.close === 'function') {\n          provider.close()\n          await onDisconnect()\n        }\n      }\n\n      const onDisconnect = async () => {\n        await web3Modal.clearCachedProvider()\n\n        dispatch('resetWalletInformation')\n      }\n\n      const subscribeProvider = (provider) => {\n        try {\n          provider.on('close', () => {\n            console.log('reset app')\n          })\n\n          provider.on('accountsChanged', async (accounts) => {\n            if (!accounts.length) {\n              await onDisconnect()\n            } else {\n              const information = await getUserInformation(provider)\n              dispatch('setWalletInformation', information)\n            }\n          })\n\n          provider.on('chainChanged', async (chainId) => {\n            console.log('chainChanged', chainId)\n          })\n\n          provider.on('networkChanged', async (networkId) => {\n            const information = await getUserInformation(provider)\n            const payload = {\n              ...information,\n              networkId: Number(networkId),\n            }\n            dispatch('setWalletInformation', payload)\n          })\n        } catch (error) {\n          console.log(error)\n        }\n      }\n\n      onMounted(async () => {\n        if (web3Modal.cachedProvider) {\n          await onConnect()\n        }\n\n        await readContract()\n      })\n\n      return {\n        balance,\n        network,\n        owner,\n        showUnlinkButton,\n        testAddress,\n        walletAddress,\n        onUnlinkAccount,\n        onConnect,\n        onDisconnect,\n      }\n    },\n  }\n</script>\n"],"sourceRoot":""}]}