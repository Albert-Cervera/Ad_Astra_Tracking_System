{"remainingRequest":"/home/avocado/Documents/NASA/01_space_tracker_ui/node_modules/babel-loader/lib/index.js!/home/avocado/Documents/NASA/01_space_tracker_ui/node_modules/eslint-loader/index.js??ref--13-0!/home/avocado/Documents/NASA/01_space_tracker_ui/src/services/WalletService.js","dependencies":[{"path":"/home/avocado/Documents/NASA/01_space_tracker_ui/src/services/WalletService.js","mtime":1632874067636},{"path":"/home/avocado/Documents/NASA/01_space_tracker_ui/node_modules/cache-loader/dist/cjs.js","mtime":1630090222612},{"path":"/home/avocado/Documents/NASA/01_space_tracker_ui/node_modules/babel-loader/lib/index.js","mtime":1630090222596},{"path":"/home/avocado/Documents/NASA/01_space_tracker_ui/node_modules/eslint-loader/index.js","mtime":1630090229671}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL2F2b2NhZG8vRG9jdW1lbnRzL05BU0EvMDFfc3BhY2VfdHJhY2tlcl91aS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmVwc2lsb24uanMiOwppbXBvcnQgeyB3ZWIzV2FsbGV0Q2xpZW50LCB3ZWIzSW5mdXJhQ2xpZW50IH0gZnJvbSAnQC93ZWIzJzsKaW1wb3J0IHsgVEVTVF9DT05UUkFDVF9BQkksIFRFU1RfQ09OVFJBQ1RfQUREUkVTUyB9IGZyb20gJ0AvY29uc3RhbnRzL2NvbnRyYWN0VGVzdCc7CmV4cG9ydCB2YXIgZ2V0VXNlckluZm9ybWF0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICB2YXIgX3JlZiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShwcm92aWRlcikgewogICAgdmFyIHdlYjMsIGV0aCwgdXRpbHMsIGFjY291bnRzLCBhZGRyZXNzLCBuZXR3b3JrSWQsIGJhbGFuY2VJbldlaSwgYmFsYW5jZTsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgd2ViMyA9IHdlYjNXYWxsZXRDbGllbnQocHJvdmlkZXIpOwogICAgICAgICAgICBldGggPSB3ZWIzLmV0aCwgdXRpbHMgPSB3ZWIzLnV0aWxzOwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNDsKICAgICAgICAgICAgcmV0dXJuIGV0aC5nZXRBY2NvdW50cygpOwoKICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgYWNjb3VudHMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICBhZGRyZXNzID0gYWNjb3VudHNbMF07CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA4OwogICAgICAgICAgICByZXR1cm4gZXRoLm5ldC5nZXRJZCgpOwoKICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgbmV0d29ya0lkID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDExOwogICAgICAgICAgICByZXR1cm4gZXRoLmdldEJhbGFuY2UoYWRkcmVzcyk7CgogICAgICAgICAgY2FzZSAxMToKICAgICAgICAgICAgYmFsYW5jZUluV2VpID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgYmFsYW5jZSA9IHV0aWxzLmZyb21XZWkoYmFsYW5jZUluV2VpKTsKICAgICAgICAgICAgYmFsYW5jZSA9IE1hdGgucm91bmQoKE51bWJlcihiYWxhbmNlKSArIE51bWJlci5FUFNJTE9OKSAqIDEwMCkgLyAxMDA7CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICBiYWxhbmNlOiBiYWxhbmNlLAogICAgICAgICAgICAgIG5ldHdvcmtJZDogbmV0d29ya0lkLAogICAgICAgICAgICAgIHdhbGxldEFkZHJlc3M6IGFkZHJlc3MKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAxNToKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlKTsKICB9KSk7CgogIHJldHVybiBmdW5jdGlvbiBnZXRVc2VySW5mb3JtYXRpb24oX3gpIHsKICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpOwpleHBvcnQgdmFyIHJlYWRUZXN0Q29udHJhY3QgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmMiA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICB2YXIgd2ViM0luZnVyYSwgbXlDb250cmFjdDsKICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIHdlYjNJbmZ1cmEgPSB3ZWIzSW5mdXJhQ2xpZW50KCk7CiAgICAgICAgICAgIG15Q29udHJhY3QgPSBuZXcgd2ViM0luZnVyYS5ldGguQ29udHJhY3QoVEVTVF9DT05UUkFDVF9BQkksIFRFU1RfQ09OVFJBQ1RfQUREUkVTUyk7CiAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNDsKICAgICAgICAgICAgcmV0dXJuIG15Q29udHJhY3QubWV0aG9kcy5vd25lcigpLmNhbGwoKTsKCiAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBfY29udGV4dDIuc2VudCk7CgogICAgICAgICAgY2FzZSA1OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlMik7CiAgfSkpOwoKICByZXR1cm4gZnVuY3Rpb24gcmVhZFRlc3RDb250cmFjdCgpIHsKICAgIHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH07Cn0oKTs="},{"version":3,"sources":["/home/avocado/Documents/NASA/01_space_tracker_ui/src/services/WalletService.js"],"names":["web3WalletClient","web3InfuraClient","TEST_CONTRACT_ABI","TEST_CONTRACT_ADDRESS","getUserInformation","provider","web3","eth","utils","getAccounts","accounts","address","net","getId","networkId","getBalance","balanceInWei","balance","fromWei","Math","round","Number","EPSILON","walletAddress","readTestContract","web3Infura","myContract","Contract","methods","owner","call"],"mappings":";;;;AAAA,SAASA,gBAAT,EAA2BC,gBAA3B,QAAmD,QAAnD;AAEA,SACEC,iBADF,EAEEC,qBAFF,QAGO,0BAHP;AAKA,OAAO,IAAMC,kBAAkB;AAAA,qEAAG,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BC,YAAAA,IAD0B,GACnBN,gBAAgB,CAACK,QAAD,CADG;AAGxBE,YAAAA,GAHwB,GAGTD,IAHS,CAGxBC,GAHwB,EAGnBC,KAHmB,GAGTF,IAHS,CAGnBE,KAHmB;AAAA;AAAA,mBAKTD,GAAG,CAACE,WAAJ,EALS;;AAAA;AAK1BC,YAAAA,QAL0B;AAM1BC,YAAAA,OAN0B,GAMhBD,QAAQ,CAAC,CAAD,CANQ;AAAA;AAAA,mBAORH,GAAG,CAACK,GAAJ,CAAQC,KAAR,EAPQ;;AAAA;AAO1BC,YAAAA,SAP0B;AAAA;AAAA,mBAQLP,GAAG,CAACQ,UAAJ,CAAeJ,OAAf,CARK;;AAAA;AAQ1BK,YAAAA,YAR0B;AAU5BC,YAAAA,OAV4B,GAUlBT,KAAK,CAACU,OAAN,CAAcF,YAAd,CAVkB;AAYhCC,YAAAA,OAAO,GAAGE,IAAI,CAACC,KAAL,CAAW,CAACC,MAAM,CAACJ,OAAD,CAAN,GAAkBI,MAAM,CAACC,OAA1B,IAAqC,GAAhD,IAAuD,GAAjE;AAZgC,6CAczB;AAAEL,cAAAA,OAAO,EAAPA,OAAF;AAAWH,cAAAA,SAAS,EAATA,SAAX;AAAsBS,cAAAA,aAAa,EAAEZ;AAArC,aAdyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBP,kBAAkB;AAAA;AAAA;AAAA,GAAxB;AAiBP,OAAO,IAAMoB,gBAAgB;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACxBC,YAAAA,UADwB,GACXxB,gBAAgB,EADL;AAGxByB,YAAAA,UAHwB,GAGX,IAAID,UAAU,CAAClB,GAAX,CAAeoB,QAAnB,CACjBzB,iBADiB,EAEjBC,qBAFiB,CAHW;AAAA;AAAA,mBAQjBuB,UAAU,CAACE,OAAX,CAAmBC,KAAnB,GAA2BC,IAA3B,EARiB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBN,gBAAgB;AAAA;AAAA;AAAA,GAAtB","sourcesContent":["import { web3WalletClient, web3InfuraClient } from '@/web3'\n\nimport {\n  TEST_CONTRACT_ABI,\n  TEST_CONTRACT_ADDRESS,\n} from '@/constants/contractTest'\n\nexport const getUserInformation = async (provider) => {\n  const web3 = web3WalletClient(provider)\n\n  const { eth, utils } = web3\n\n  const accounts = await eth.getAccounts()\n  const address = accounts[0]\n  const networkId = await eth.net.getId()\n  const balanceInWei = await eth.getBalance(address)\n\n  let balance = utils.fromWei(balanceInWei)\n\n  balance = Math.round((Number(balance) + Number.EPSILON) * 100) / 100\n\n  return { balance, networkId, walletAddress: address }\n}\n\nexport const readTestContract = async () => {\n  const web3Infura = web3InfuraClient()\n\n  const myContract = new web3Infura.eth.Contract(\n    TEST_CONTRACT_ABI,\n    TEST_CONTRACT_ADDRESS\n  )\n\n  return await myContract.methods.owner().call()\n}\n"]}]}